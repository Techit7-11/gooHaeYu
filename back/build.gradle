plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.ll'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	// Firebase-admin
	implementation group: 'com.google.firebase', name: 'firebase-admin', version: '9.2.0'

	// Spring Batch
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	testImplementation 'org.springframework.batch:spring-batch-test'

	// WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// JPA & DataBase
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'

	// JPA QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// JWT Token
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// DevTools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Oauth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// Thymeleaf and Security
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

	// Web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.projectlombok:lombok:1.18.28'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// Valid
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//MapStruct
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	// Mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.apache.commons:commons-lang3:3.12.0'

	// S3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// Slack
	implementation 'com.slack.api:slack-api-client:1.40.2'

	// Cache
	implementation 'com.github.ben-manes.caffeine:caffeine:3.1.1'
}

// 테스트를 실행할때마다 jacoco 리포트 생성
test {
	finalizedBy jacocoTestReport
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.11"
	reportsDirectory = layout.buildDirectory.dir('jacocoReport')
}

jacocoTestReport {

	dependsOn test   // 테스트 후 실행 되도록

	reports {    // 리포트 파일
		xml.required = false
		csv.required = false
		html.required = true
	}

	// 리포트 생성 시 커버리지 측정에서 제외할 클래스
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/*Application*',           // 애플리케이션 실행 클래스 제외
							'**/global/**',               // 전역 설정 및 구성 클래스 제외
							'**/standard/**',             // 표준 유틸리티 및 기반 클래스 제외
							'**/dto/**',                  // DTO 클래스 제외
							'**/eventListener/**',        // 이벤트 리스너 클래스 제외
							'**/chat/**',                 // 채팅 관련 클래스 제외
							'**/payment/**',              // 토스페이먼츠 관련 클래스 제외
							'**/home/**',                 // 배포 관련 클래스 제외
							'**/ReadinessController*',
							"**/Q*"                       // QueryDSL 자동 생성 클래스 제외
					])
				})
		)
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

// Jacoco 커버리지 검증 태스크 설정
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true;   // 룰 활성화
			element = 'CLASS'   // 룰을 체크할 단위

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.00     // 변경 예정, ex) 0.70 -> 라인 커버리지가 70% 이상이어야만 빌드 통과
			}
			// 커버리지 측정 제외 대상
			excludes = [
					'**/*Application*',
					'**/global/**',
					'**/standard/**',
					'**/dto/**',
					'**/eventListener/**',
					'**/chat/**',
					'**/payment/**',
					'**/home/**',
					'**/ReadinessController*',
					"**/Q*"
			]
		}

	}
}

jar{
	enabled = false
}
